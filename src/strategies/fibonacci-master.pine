//@version=5
strategy("Fibonacci Master - Stratus Engine", shorttitle="FIB-Master", overlay=true, 
         default_qty_type=strategy.percent_of_equity, default_qty_value=10)

// === STRATEGY PARAMETERS ===
// These parameters are optimized by Stratus Engine
lookback_period = input.int(50, title="Lookback Period", minval=20, maxval=100, group="Fibonacci Settings")
retracement_236 = input.float(0.236, title="Fib 23.6%", minval=0.1, maxval=0.4, step=0.001, group="Fibonacci Levels")
retracement_382 = input.float(0.382, title="Fib 38.2%", minval=0.3, maxval=0.5, step=0.001, group="Fibonacci Levels")
retracement_618 = input.float(0.618, title="Fib 61.8%", minval=0.5, maxval=0.7, step=0.001, group="Fibonacci Levels")
retracement_786 = input.float(0.786, title="Fib 78.6%", minval=0.7, maxval=0.9, step=0.001, group="Fibonacci Levels")
trend_strength = input.float(0.8, title="Trend Strength", minval=0.5, maxval=1.0, step=0.1, group="Signal Settings")
confirmation_candles = input.int(2, title="Confirmation Candles", minval=1, maxval=5, group="Signal Settings")

// === WEBHOOK SETTINGS ===
// Note: Replace with actual webhook URL generated by the platform
webhook_url = "http://localhost:3001/api/pine-script-webhook/fibonacci-001/YOUR_WEBHOOK_ID"
strategy_id = "fibonacci-001"

// === FIBONACCI CALCULATION ===
// Find swing highs and lows
swing_high = ta.highest(high, lookback_period)
swing_low = ta.lowest(low, lookback_period)

// Calculate Fibonacci levels
fib_range = swing_high - swing_low
fib_236 = swing_high - (fib_range * retracement_236)
fib_382 = swing_high - (fib_range * retracement_382)
fib_618 = swing_high - (fib_range * retracement_618)
fib_786 = swing_high - (fib_range * retracement_786)

// === TECHNICAL INDICATORS ===
ma_20 = ta.sma(close, 20)
ma_50 = ta.sma(close, 50)
rsi = ta.rsi(close, 14)
atr = ta.atr(14)

// === TREND ANALYSIS ===
uptrend = ma_20 > ma_50 and close > ma_50
downtrend = ma_20 < ma_50 and close < ma_50
trend_strength_calc = math.abs(ma_20 - ma_50) / ma_50

// === ENTRY CONDITIONS ===
// Long Entry: Price bounces from Fibonacci support in uptrend
near_fib_236 = math.abs(close - fib_236) <= atr * 0.5
near_fib_382 = math.abs(close - fib_382) <= atr * 0.5
near_fib_618 = math.abs(close - fib_618) <= atr * 0.5

long_fib_bounce = (near_fib_236 or near_fib_382 or near_fib_618) and close > low[1]
long_condition = long_fib_bounce and uptrend and trend_strength_calc >= trend_strength and rsi > 40
long_confirmed = ta.barssince(long_condition) <= confirmation_candles and long_condition[confirmation_candles]

// Short Entry: Price rejects from Fibonacci resistance in downtrend  
short_fib_reject = (near_fib_236 or near_fib_382 or near_fib_618) and close < high[1]
short_condition = short_fib_reject and downtrend and trend_strength_calc >= trend_strength and rsi < 60
short_confirmed = ta.barssince(short_condition) <= confirmation_candles and short_condition[confirmation_candles]

// === EXIT CONDITIONS ===
// Exit long when price reaches next Fibonacci level or breaks below MA
long_exit = close >= swing_high or close < ma_20 or rsi >= 80

// Exit short when price reaches next Fibonacci level or breaks above MA
short_exit = close <= swing_low or close > ma_20 or rsi <= 20

// === STRATEGY EXECUTION ===
if long_confirmed and strategy.position_size == 0
    strategy.entry("Long", strategy.long, 
                  comment="Fib Long @ " + str.tostring(close, "#.##"))
    
    // Send webhook alert for BUY signal
    alert('{"passphrase": "sdfqoei1898498", "ticker": "' + syminfo.ticker + '", "strategy": {"order_action": "buy", "order_type": "limit", "order_price": "' + str.tostring(close) + '", "order_contracts": "0.01", "type": "buy", "volume": "0.01", "pair": "' + syminfo.ticker + '", "validate": "false", "close": {"order_type": "limit", "price": "' + str.tostring(close) + '"}, "stop_loss": "' + str.tostring(close * 0.98) + '"}}', 
          alert.freq_once_per_bar)

if short_confirmed and strategy.position_size == 0
    strategy.entry("Short", strategy.short, 
                  comment="Fib Short @ " + str.tostring(close, "#.##"))
    
    // Send webhook alert for SELL signal
    alert('{"passphrase": "sdfqoei1898498", "ticker": "' + syminfo.ticker + '", "strategy": {"order_action": "sell", "order_type": "limit", "order_price": "' + str.tostring(close) + '", "order_contracts": "0.01", "type": "sell", "volume": "0.01", "pair": "' + syminfo.ticker + '", "validate": "false", "close": {"order_type": "limit", "price": "' + str.tostring(close) + '"}, "stop_loss": "' + str.tostring(close * 1.02) + '"}}', 
          alert.freq_once_per_bar)

// === EXIT TRADES ===
if strategy.position_size > 0 and long_exit
    strategy.close("Long", comment="Exit Long @ " + str.tostring(close, "#.##"))
    
    // Send webhook alert for position CLOSE
    alert('{"passphrase": "sdfqoei1898498", "ticker": "' + syminfo.ticker + '", "strategy": {"order_action": "close", "order_type": "limit", "order_price": "' + str.tostring(close) + '", "order_contracts": "0", "type": "close", "volume": "0", "pair": "' + syminfo.ticker + '", "validate": "false", "close": {"order_type": "limit", "price": "' + str.tostring(close) + '"}, "stop_loss": "0"}}', 
          alert.freq_once_per_bar)

if strategy.position_size < 0 and short_exit
    strategy.close("Short", comment="Exit Short @ " + str.tostring(close, "#.##"))
    
    // Send webhook alert for position CLOSE
    alert('{"passphrase": "sdfqoei1898498", "ticker": "' + syminfo.ticker + '", "strategy": {"order_action": "close", "order_type": "limit", "order_price": "' + str.tostring(close) + '", "order_contracts": "0", "type": "close", "volume": "0", "pair": "' + syminfo.ticker + '", "validate": "false", "close": {"order_type": "limit", "price": "' + str.tostring(close) + '"}, "stop_loss": "0"}}', 
          alert.freq_once_per_bar)

// === VISUALIZATION ===
// Plot Fibonacci levels
plot(fib_236, "Fib 23.6%", color=color.yellow, linewidth=1, style=plot.style_line)
plot(fib_382, "Fib 38.2%", color=color.orange, linewidth=1, style=plot.style_line)
plot(fib_618, "Fib 61.8%", color=color.red, linewidth=2, style=plot.style_line)
plot(fib_786, "Fib 78.6%", color=color.purple, linewidth=1, style=plot.style_line)

// Plot swing points
plot(swing_high, "Swing High", color=color.lime, linewidth=2, style=plot.style_line)
plot(swing_low, "Swing Low", color=color.red, linewidth=2, style=plot.style_line)

// Plot moving averages
plot(ma_20, "MA 20", color=color.blue, linewidth=1)
plot(ma_50, "MA 50", color=color.gray, linewidth=1)

// Plot entry/exit signals
plotshape(long_confirmed, title="Long Entry", style=shape.triangleup, 
          location=location.belowbar, color=color.green, size=size.small)
plotshape(short_confirmed, title="Short Entry", style=shape.triangledown, 
          location=location.abovebar, color=color.red, size=size.small)

// === PERFORMANCE TRACKING ===
// Display key metrics on chart
var table performance_table = table.new(position.top_right, 2, 7, bgcolor=color.white, 
                                       border_width=1)

if barstate.islast
    table.cell(performance_table, 0, 0, "Metric", text_color=color.black, bgcolor=color.gray)
    table.cell(performance_table, 1, 0, "Value", text_color=color.black, bgcolor=color.gray)
    table.cell(performance_table, 0, 1, "Total Trades", text_color=color.black)
    table.cell(performance_table, 1, 1, str.tostring(strategy.closedtrades), text_color=color.black)
    table.cell(performance_table, 0, 2, "Win Rate %", text_color=color.black)
    table.cell(performance_table, 1, 2, str.tostring(strategy.wintrades/strategy.closedtrades*100, "#.#"), 
               text_color=color.black)
    table.cell(performance_table, 0, 3, "Profit Factor", text_color=color.black)
    table.cell(performance_table, 1, 3, str.tostring(strategy.grossprofit/strategy.grossloss, "#.##"), 
               text_color=color.black)
    table.cell(performance_table, 0, 4, "Trend Strength", text_color=color.black)
    table.cell(performance_table, 1, 4, str.tostring(trend_strength_calc * 100, "#.#") + "%", 
               text_color=(trend_strength_calc >= trend_strength ? color.green : color.red))
    table.cell(performance_table, 0, 5, "RSI Current", text_color=color.black)
    table.cell(performance_table, 1, 5, str.tostring(rsi, "#.#"), 
               text_color=(rsi > 70 ? color.red : rsi < 30 ? color.green : color.black))
    table.cell(performance_table, 0, 6, "Strategy ID", text_color=color.black)
    table.cell(performance_table, 1, 6, strategy_id, text_color=color.blue)

// === STRATUS ENGINE OPTIMIZATION NOTES ===
// The following parameters are optimized by Stratus Engine:
// - lookback_period: Optimized between 20-100 for swing point detection
// - retracement levels: Fine-tuned for precise Fibonacci level detection
// - trend_strength: Optimized between 0.5-1.0 for trend confirmation
// - confirmation_candles: Optimized between 1-5 for signal validation
//
// Webhook URL: Generated dynamically by Signal Cartel platform
// Strategy ID: fibonacci-001
//
// Alert JSON Format:
// {
//   "passphrase": "sdfqoei1898498",
//   "ticker": "BTCUSD",
//   "strategy": {
//     "order_action": "buy|sell|close",
//     "order_type": "limit",
//     "order_price": "50000.00",
//     "order_contracts": "0.01",
//     "type": "buy|sell|close",
//     "volume": "0.01",
//     "pair": "BTCUSD",
//     "validate": "true|false",
//     "close": {
//       "order_type": "limit",
//       "price": "50000.00"
//     },
//     "stop_loss": "49000.00"
//   }
// }
//
// IMPORTANT: Set "validate": "false" for testing (no real trades)
//            Set "validate": "false" for live trading