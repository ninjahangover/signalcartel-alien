//@version=5
strategy("AI Momentum Elite - Stratus Engine", shorttitle="AI-Mom-Elite", overlay=true, 
         default_qty_type=strategy.percent_of_equity, default_qty_value=10)

// === STRATEGY PARAMETERS ===
// These parameters are optimized by Stratus Engine
lookback_period = input.int(50, title="Lookback Period", minval=20, maxval=100, group="AI Settings")
momentum_threshold = input.float(0.02, title="Momentum Threshold", minval=0.01, maxval=0.05, step=0.001, group="AI Settings")
volatility_filter = input.float(0.015, title="Volatility Filter", minval=0.005, maxval=0.03, step=0.001, group="AI Settings")
prediction_horizon = input.int(5, title="Prediction Horizon", minval=3, maxval=10, group="AI Settings")
confidence_threshold = input.float(0.75, title="Confidence Threshold", minval=0.6, maxval=0.95, step=0.01, group="Signal Settings")
neural_smoothing = input.int(3, title="Neural Smoothing", minval=1, maxval=7, group="Signal Settings")

// === WEBHOOK SETTINGS ===
// Note: Replace with actual webhook URL generated by the platform
webhook_url = "http://localhost:3001/api/pine-script-webhook/ai-momentum-001/YOUR_WEBHOOK_ID"
strategy_id = "ai-momentum-001"

// === AI MOMENTUM CALCULATION ===
// Multi-timeframe momentum analysis
momentum_1 = (close - close[5]) / close[5]
momentum_2 = (close - close[10]) / close[10]
momentum_3 = (close - close[20]) / close[20]

// Weighted momentum score (simulating neural network layers)
layer_1 = momentum_1 * 0.5 + momentum_2 * 0.3 + momentum_3 * 0.2
layer_2 = ta.sma(layer_1, neural_smoothing)
layer_3 = ta.ema(layer_2, neural_smoothing)

// AI momentum signal
ai_momentum = layer_3

// === VOLATILITY AND TREND ANALYSIS ===
atr = ta.atr(14)
volatility = atr / close
trend_ema_fast = ta.ema(close, 12)
trend_ema_slow = ta.ema(close, 26)
trend_strength = (trend_ema_fast - trend_ema_slow) / trend_ema_slow

// === MACHINE LEARNING SIMULATION ===
// Simulate feature engineering for ML model
feature_1 = ta.rsi(close, 14) / 100  // Normalized RSI
feature_2 = (close - ta.sma(close, 20)) / ta.sma(close, 20)  // Price vs MA deviation
feature_3 = volatility  // Volatility feature
feature_4 = ai_momentum  // Momentum feature
feature_5 = (volume - ta.sma(volume, 20)) / ta.sma(volume, 20)  // Volume anomaly

// Simulated neural network prediction (weighted combination)
neural_weights_1 = array.from(0.15, 0.25, 0.20, 0.30, 0.10)  // Input layer weights
prediction_raw = feature_1 * 0.15 + feature_2 * 0.25 + feature_3 * 0.20 + feature_4 * 0.30 + feature_5 * 0.10

// Apply activation function (sigmoid simulation)
prediction_sigmoid = 2 / (1 + math.exp(-2 * prediction_raw)) - 1

// Prediction confidence calculation
prediction_confidence = math.abs(prediction_sigmoid)

// === ENTRY CONDITIONS ===
// Long Entry: AI predicts upward momentum with high confidence
long_signal = prediction_sigmoid > momentum_threshold and prediction_confidence > confidence_threshold
long_volatility_ok = volatility < volatility_filter
long_trend_ok = trend_strength > 0
long_condition = long_signal and long_volatility_ok and long_trend_ok

// Short Entry: AI predicts downward momentum with high confidence
short_signal = prediction_sigmoid < -momentum_threshold and prediction_confidence > confidence_threshold
short_volatility_ok = volatility < volatility_filter
short_trend_ok = trend_strength < 0
short_condition = short_signal and short_volatility_ok and short_trend_ok

// === EXIT CONDITIONS ===
// Dynamic exit based on momentum reversal and confidence loss
long_exit = prediction_sigmoid < 0 or prediction_confidence < 0.5 or close < trend_ema_fast
short_exit = prediction_sigmoid > 0 or prediction_confidence < 0.5 or close > trend_ema_fast

// === STRATEGY EXECUTION ===
if long_condition and strategy.position_size == 0
    strategy.entry("Long", strategy.long, 
                  comment="AI Long @ " + str.tostring(close, "#.##"))
    
    // Send webhook alert for BUY signal
    alert('{"passphrase": "sdfqoei1898498", "ticker": "' + syminfo.ticker + '", "strategy": {"order_action": "buy", "order_type": "limit", "order_price": "' + str.tostring(close) + '", "order_contracts": "0.01", "type": "buy", "volume": "0.01", "pair": "' + syminfo.ticker + '", "validate": "false", "close": {"order_type": "limit", "price": "' + str.tostring(close) + '"}, "stop_loss": "' + str.tostring(close * 0.97) + '"}}', 
          alert.freq_once_per_bar)

if short_condition and strategy.position_size == 0
    strategy.entry("Short", strategy.short, 
                  comment="AI Short @ " + str.tostring(close, "#.##"))
    
    // Send webhook alert for SELL signal
    alert('{"passphrase": "sdfqoei1898498", "ticker": "' + syminfo.ticker + '", "strategy": {"order_action": "sell", "order_type": "limit", "order_price": "' + str.tostring(close) + '", "order_contracts": "0.01", "type": "sell", "volume": "0.01", "pair": "' + syminfo.ticker + '", "validate": "false", "close": {"order_type": "limit", "price": "' + str.tostring(close) + '"}, "stop_loss": "' + str.tostring(close * 1.03) + '"}}', 
          alert.freq_once_per_bar)

// === EXIT TRADES ===
if strategy.position_size > 0 and long_exit
    strategy.close("Long", comment="Exit Long @ " + str.tostring(close, "#.##"))
    
    // Send webhook alert for position CLOSE
    alert('{"passphrase": "sdfqoei1898498", "ticker": "' + syminfo.ticker + '", "strategy": {"order_action": "close", "order_type": "limit", "order_price": "' + str.tostring(close) + '", "order_contracts": "0", "type": "close", "volume": "0", "pair": "' + syminfo.ticker + '", "validate": "false", "close": {"order_type": "limit", "price": "' + str.tostring(close) + '"}, "stop_loss": "0"}}', 
          alert.freq_once_per_bar)

if strategy.position_size < 0 and short_exit
    strategy.close("Short", comment="Exit Short @ " + str.tostring(close, "#.##"))
    
    // Send webhook alert for position CLOSE
    alert('{"passphrase": "sdfqoei1898498", "ticker": "' + syminfo.ticker + '", "strategy": {"order_action": "close", "order_type": "limit", "order_price": "' + str.tostring(close) + '", "order_contracts": "0", "type": "close", "volume": "0", "pair": "' + syminfo.ticker + '", "validate": "false", "close": {"order_type": "limit", "price": "' + str.tostring(close) + '"}, "stop_loss": "0"}}', 
          alert.freq_once_per_bar)

// === VISUALIZATION ===
// Plot AI prediction and confidence
hline(0, "Zero Line", color=color.gray, linestyle=hline.style_dashed)
plot(prediction_sigmoid, "AI Prediction", color=(prediction_sigmoid > 0 ? color.green : color.red), 
     linewidth=2, style=plot.style_line)
plot(prediction_confidence, "Confidence", color=color.blue, linewidth=1, style=plot.style_area, 
     transp=80)

// Plot momentum threshold lines
hline(momentum_threshold, "Long Threshold", color=color.green, linestyle=hline.style_dotted)
hline(-momentum_threshold, "Short Threshold", color=color.red, linestyle=hline.style_dotted)
hline(confidence_threshold, "Confidence Threshold", color=color.blue, linestyle=hline.style_dotted)

// Plot trend EMAs
plot(trend_ema_fast, "Fast EMA", color=color.yellow, linewidth=1)
plot(trend_ema_slow, "Slow EMA", color=color.orange, linewidth=1)

// Plot entry/exit signals
plotshape(long_condition, title="AI Long Entry", style=shape.triangleup, 
          location=location.belowbar, color=color.lime, size=size.normal)
plotshape(short_condition, title="AI Short Entry", style=shape.triangledown, 
          location=location.abovebar, color=color.red, size=size.normal)

// === PERFORMANCE TRACKING ===
// Display key metrics on chart
var table performance_table = table.new(position.top_right, 2, 8, bgcolor=color.white, 
                                       border_width=1)

if barstate.islast
    table.cell(performance_table, 0, 0, "Metric", text_color=color.black, bgcolor=color.gray)
    table.cell(performance_table, 1, 0, "Value", text_color=color.black, bgcolor=color.gray)
    table.cell(performance_table, 0, 1, "Total Trades", text_color=color.black)
    table.cell(performance_table, 1, 1, str.tostring(strategy.closedtrades), text_color=color.black)
    table.cell(performance_table, 0, 2, "Win Rate %", text_color=color.black)
    table.cell(performance_table, 1, 2, str.tostring(strategy.wintrades/strategy.closedtrades*100, "#.#"), 
               text_color=color.black)
    table.cell(performance_table, 0, 3, "Profit Factor", text_color=color.black)
    table.cell(performance_table, 1, 3, str.tostring(strategy.grossprofit/strategy.grossloss, "#.##"), 
               text_color=color.black)
    table.cell(performance_table, 0, 4, "AI Prediction", text_color=color.black)
    table.cell(performance_table, 1, 4, str.tostring(prediction_sigmoid, "#.###"), 
               text_color=(prediction_sigmoid > 0 ? color.green : color.red))
    table.cell(performance_table, 0, 5, "Confidence", text_color=color.black)
    table.cell(performance_table, 1, 5, str.tostring(prediction_confidence * 100, "#.#") + "%", 
               text_color=(prediction_confidence > confidence_threshold ? color.green : color.red))
    table.cell(performance_table, 0, 6, "Volatility", text_color=color.black)
    table.cell(performance_table, 1, 6, str.tostring(volatility * 100, "#.##") + "%", 
               text_color=(volatility < volatility_filter ? color.green : color.orange))
    table.cell(performance_table, 0, 7, "Strategy ID", text_color=color.black)
    table.cell(performance_table, 1, 7, strategy_id, text_color=color.blue)

// === STRATUS ENGINE OPTIMIZATION NOTES ===
// The following parameters are optimized by Stratus Engine:
// - lookback_period: Optimized between 20-100 for momentum calculation
// - momentum_threshold: Optimized between 0.01-0.05 for signal sensitivity
// - volatility_filter: Optimized between 0.005-0.03 for market condition filtering
// - prediction_horizon: Optimized between 3-10 for forecast accuracy
// - confidence_threshold: Optimized between 0.6-0.95 for signal reliability
// - neural_smoothing: Optimized between 1-7 for noise reduction
//
// Webhook URL: Generated dynamically by Signal Cartel platform
// Strategy ID: ai-momentum-001
//
// AI Features:
// - Multi-layer momentum analysis simulating neural network
// - Feature engineering with normalized inputs
// - Sigmoid activation function for predictions
// - Dynamic confidence scoring
// - Volatility and trend filtering
//
// Alert JSON Format:
// {
//   "passphrase": "sdfqoei1898498",
//   "ticker": "BTCUSD",
//   "strategy": {
//     "order_action": "buy|sell|close",
//     "order_type": "limit",
//     "order_price": "50000.00",
//     "order_contracts": "0.01",
//     "type": "buy|sell|close",
//     "volume": "0.01",
//     "pair": "BTCUSD",
//     "validate": "true|false",
//     "close": {
//       "order_type": "limit",
//       "price": "50000.00"
//     },
//     "stop_loss": "48500.00"
//   }
// }
//
// IMPORTANT: Set "validate": "false" for testing (no real trades)
//            Set "validate": "false" for live trading