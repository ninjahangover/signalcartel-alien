#!/bin/bash
# QUANTUM FORGE‚Ñ¢ DNS Configuration Helper for VMS Database Infrastructure
# Provides DNS setup instructions and validation tools

echo "üåê QUANTUM FORGE‚Ñ¢ VMS DNS CONFIGURATION HELPER"
echo "=============================================="
echo ""

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

# Get VMS server IP (you'll need to update this)
VMS_IP="${1:-YOUR_VMS_SERVER_IP}"
DOMAIN="${2:-yourdomain.com}"

if [[ "$VMS_IP" == "YOUR_VMS_SERVER_IP" ]]; then
    echo -e "${RED}‚ùå VMS IP address required${NC}"
    echo "Usage: $0 <VMS_SERVER_IP> [domain.com]"
    echo "Example: $0 192.168.1.100 yourdomain.com"
    exit 1
fi

echo -e "${BLUE}üìã DNS CONFIGURATION FOR QUANTUM FORGE‚Ñ¢ DATABASE ACCESS${NC}"
echo "VMS Server IP: $VMS_IP"
echo "Domain: $DOMAIN"
echo ""

echo -e "${YELLOW}üîß STEP 1: DNS A RECORDS TO CREATE${NC}"
echo "Add these A records to your DNS provider:"
echo ""
echo "Record Type | Subdomain      | Points To     | TTL"
echo "-----------|----------------|---------------|----"
echo "A          | db             | $VMS_IP       | 300"
echo "A          | analytics      | $VMS_IP       | 300" 
echo "A          | db-backup      | $VMS_IP       | 300"
echo ""

echo -e "${YELLOW}üîß STEP 2: RESULTING DNS NAMES${NC}"
echo "After DNS propagation, these will resolve to your VMS server:"
echo "‚Ä¢ db.$DOMAIN:5432 (Primary Database)"
echo "‚Ä¢ analytics.$DOMAIN:5434 (Analytics Database)" 
echo "‚Ä¢ db.$DOMAIN:5433 (Replica Database)"
echo "‚Ä¢ db.$DOMAIN:6379 (Redis Cache)"
echo "‚Ä¢ db.$DOMAIN:6432 (Connection Pool)"
echo ""

echo -e "${YELLOW}üîß STEP 3: TESTING DNS RESOLUTION${NC}"
echo "Test DNS resolution with these commands:"
echo ""
echo "# Test if DNS records are working"
echo "nslookup db.$DOMAIN"
echo "nslookup analytics.$DOMAIN"
echo ""
echo "# Test database connectivity"
echo "pg_isready -h db.$DOMAIN -p 5432"
echo "pg_isready -h analytics.$DOMAIN -p 5434"
echo ""

# Create DNS test script
cat > test-dns-connectivity.sh << EOF
#!/bin/bash
# Test DNS and database connectivity

echo "üß™ Testing DNS Resolution..."
echo "=============================="

echo "Testing db.$DOMAIN..."
if nslookup db.$DOMAIN > /dev/null 2>&1; then
    echo "‚úÖ db.$DOMAIN resolves"
    IP=\$(nslookup db.$DOMAIN | grep "Address:" | tail -1 | awk '{print \$2}')
    echo "   IP: \$IP"
else
    echo "‚ùå db.$DOMAIN does not resolve"
fi

echo ""
echo "Testing analytics.$DOMAIN..."
if nslookup analytics.$DOMAIN > /dev/null 2>&1; then
    echo "‚úÖ analytics.$DOMAIN resolves"
    IP=\$(nslookup analytics.$DOMAIN | grep "Address:" | tail -1 | awk '{print \$2}')
    echo "   IP: \$IP"
else
    echo "‚ùå analytics.$DOMAIN does not resolve"
fi

echo ""
echo "üîå Testing Database Connectivity..."
echo "=================================="

if command -v pg_isready &> /dev/null; then
    echo "Testing primary database (db.$DOMAIN:5432)..."
    if pg_isready -h db.$DOMAIN -p 5432; then
        echo "‚úÖ Primary database is ready"
    else
        echo "‚ùå Primary database is not ready"
    fi
    
    echo "Testing replica database (db.$DOMAIN:5433)..."
    if pg_isready -h db.$DOMAIN -p 5433; then
        echo "‚úÖ Replica database is ready"
    else
        echo "‚ùå Replica database is not ready"
    fi
    
    echo "Testing analytics database (analytics.$DOMAIN:5434)..."
    if pg_isready -h analytics.$DOMAIN -p 5434; then
        echo "‚úÖ Analytics database is ready"
    else
        echo "‚ùå Analytics database is not ready"
    fi
else
    echo "‚ö†Ô∏è pg_isready not available. Install postgresql-client to test database connectivity."
fi

echo ""
echo "üß™ Testing Redis Connectivity..."
echo "==============================="

if command -v redis-cli &> /dev/null; then
    if redis-cli -h db.$DOMAIN -p 6379 ping > /dev/null 2>&1; then
        echo "‚úÖ Redis cache is ready"
    else
        echo "‚ùå Redis cache is not ready"
    fi
else
    echo "‚ö†Ô∏è redis-cli not available. Install redis-tools to test Redis connectivity."
fi

echo ""
echo "üîß Testing Connection Pool..."
echo "============================"

if command -v nc &> /dev/null; then
    if nc -z db.$DOMAIN 6432; then
        echo "‚úÖ Connection pool (pgBouncer) is ready"
    else
        echo "‚ùå Connection pool (pgBouncer) is not ready"
    fi
else
    echo "‚ö†Ô∏è netcat not available. Install netcat to test connection pool."
fi
EOF

chmod +x test-dns-connectivity.sh

echo -e "${YELLOW}üîß STEP 4: CONNECTION STRING TEMPLATES${NC}"
echo "Use these connection strings in your dev servers' .env files:"
echo ""
echo "# Production Database (Primary)"
echo 'DATABASE_URL="postgresql://trading_user:PASSWORD@db.'$DOMAIN':5432/signalcartel"'
echo ""
echo "# Analytics Database"  
echo 'ANALYTICS_DB_URL="postgresql://analytics_user:PASSWORD@analytics.'$DOMAIN':5434/signalcartel_analytics"'
echo ""
echo "# Backup Database (Replica)"
echo 'BACKUP_DB_URL="postgresql://trading_user:PASSWORD@db.'$DOMAIN':5433/signalcartel"'
echo ""
echo "# High-Performance Pool"
echo 'POOLED_DB_URL="postgresql://trading_user:PASSWORD@db.'$DOMAIN':6432/signalcartel"'
echo ""
echo "# Redis Cache"
echo 'REDIS_URL="redis://db.'$DOMAIN':6379"'
echo ""

echo -e "${YELLOW}üîß STEP 5: FIREWALL CONFIGURATION${NC}"
echo "Configure your VMS server firewall to allow these ports:"
echo "‚Ä¢ Port 5432 (PostgreSQL Primary)"
echo "‚Ä¢ Port 5433 (PostgreSQL Replica)" 
echo "‚Ä¢ Port 5434 (Analytics Database)"
echo "‚Ä¢ Port 6379 (Redis Cache)"
echo "‚Ä¢ Port 6432 (Connection Pool)"
echo ""
echo "Example UFW commands:"
echo "sudo ufw allow 5432/tcp comment 'PostgreSQL Primary'"
echo "sudo ufw allow 5433/tcp comment 'PostgreSQL Replica'"
echo "sudo ufw allow 5434/tcp comment 'Analytics DB'"
echo "sudo ufw allow 6379/tcp comment 'Redis Cache'"
echo "sudo ufw allow 6432/tcp comment 'Connection Pool'"
echo ""

echo -e "${GREEN}‚úÖ DNS Configuration Helper Complete!${NC}"
echo ""
echo -e "${BLUE}üìã NEXT STEPS:${NC}"
echo "1. Add the A records to your DNS provider"
echo "2. Wait 5-15 minutes for DNS propagation"
echo "3. Run: ./test-dns-connectivity.sh"
echo "4. Update your dev servers with the connection strings"
echo "5. Test database connectivity from dev servers"
echo ""
echo -e "${YELLOW}üìù DNS test script created: test-dns-connectivity.sh${NC}"