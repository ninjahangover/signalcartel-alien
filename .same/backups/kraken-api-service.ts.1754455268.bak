class KrakenApiService {
  private apiKey: string | null = null;
  private apiSecret: string | null = null;
  private isAuthenticated = false;

  async authenticate(apiKey: string, apiSecret: string): Promise<boolean> {
    try {
      this.apiKey = apiKey;
      this.apiSecret = apiSecret;

      // Try to make a test call to verify credentials
      const accountInfo = await this.getAccountBalance();
      if (accountInfo) {
        this.isAuthenticated = true;
        return true;
      }
      return false;
    } catch (error) {
      console.error('Authentication failed:', error);
      this.isAuthenticated = false;
      return false;
    }
  }

  private async makeRequest(endpoint: string, params: any = {}): Promise<any> {
    // In local development, return mock data since serverless function isn't available
    if (process.env.NODE_ENV === 'development') {
      return this.getMockData(endpoint);
    }

    try {
      const response = await fetch('/api/kraken-proxy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          endpoint,
          params,
          apiKey: this.apiKey,
          apiSecret: this.apiSecret,
        }),
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status}`);
      }

      const data = await response.json();
      return data;
    } catch (error) {
      console.error('API request failed, falling back to mock data:', error);
      return this.getMockData(endpoint);
    }
  }

  private getMockData(endpoint: string): any {
    const mockData: { [key: string]: any } = {
      'Balance': {
        result: {
          XXBT: '1.25847392',
          ZUSD: '15234.67',
          XETH: '8.50492817',
          XXRP: '2500.00000000',
          XLTC: '15.75000000',
          XDOGE: '10000.00000000'
        }
      },
      'OpenOrders': {
        result: {
          open: {
            'O7QAFX-DYHRG-BTPVEM': {
              refid: null,
              userref: 0,
              status: 'open',
              opentm: 1699877234.1234,
              starttm: 0,
              expiretm: 0,
              descr: {
                pair: 'XBTUSD',
                type: 'buy',
                ordertype: 'limit',
                price: '35000.0',
                price2: '0',
                leverage: 'none',
                order: 'buy 0.1 XBTUSD @ limit 35000.0',
                close: ''
              },
              vol: '0.10000000',
              vol_exec: '0.00000000',
              cost: '0.00000000',
              fee: '0.00000000',
              price: '0.00000000',
              stopprice: '0.00000000',
              limitprice: '0.00000000',
              misc: '',
              oflags: 'fciq',
              trades: []
            },
            'A8XBCR-ZYKDE-MNVHJT': {
              refid: null,
              userref: 0,
              status: 'open',
              opentm: 1699876534.5678,
              starttm: 0,
              expiretm: 0,
              descr: {
                pair: 'ETHUSD',
                type: 'sell',
                ordertype: 'limit',
                price: '2200.0',
                price2: '0',
                leverage: 'none',
                order: 'sell 2.0 ETHUSD @ limit 2200.0',
                close: ''
              },
              vol: '2.00000000',
              vol_exec: '0.00000000',
              cost: '0.00000000',
              fee: '0.00000000',
              price: '0.00000000',
              stopprice: '0.00000000',
              limitprice: '0.00000000',
              misc: '',
              oflags: 'fciq',
              trades: []
            }
          }
        }
      },
      'TradesHistory': {
        result: {
          trades: {
            'TGBHKL-MNOPQ-RSTUVW': {
              ordertxid: 'ORDERID1',
              postxid: 'TKH2SE-M7IF5-CFI7AT',
              pair: 'XBTUSD',
              time: 1699870000.1234,
              type: 'buy',
              ordertype: 'market',
              price: '36500.0',
              cost: '3650.00',
              fee: '9.49',
              vol: '0.10000000',
              margin: '0.00000000',
              misc: ''
            },
            'HIJKLM-NOPQR-STUVWX': {
              ordertxid: 'ORDERID2',
              postxid: 'TKH2SE-M7IF5-CFI7BS',
              pair: 'ETHUSD',
              time: 1699869000.5678,
              type: 'sell',
              ordertype: 'limit',
              price: '2150.0',
              cost: '4300.00',
              fee: '11.18',
              vol: '2.00000000',
              margin: '0.00000000',
              misc: ''
            },
            'ABCDEF-GHIJK-LMNOPQ': {
              ordertxid: 'ORDERID3',
              postxid: 'TKH2SE-M7IF5-CFI7CT',
              pair: 'XRPUSD',
              time: 1699868000.9012,
              type: 'buy',
              ordertype: 'market',
              price: '0.65',
              cost: '1625.00',
              fee: '4.23',
              vol: '2500.00000000',
              margin: '0.00000000',
              misc: ''
            }
          },
          count: 3
        }
      }
    };

    return mockData[endpoint] || { result: {} };
  }

  async getAccountBalance(): Promise<any> {
    return this.makeRequest('Balance');
  }

  async getOpenOrders(): Promise<any> {
    return this.makeRequest('OpenOrders');
  }

  async getTradesHistory(): Promise<any> {
    return this.makeRequest('TradesHistory');
  }

  async getAccountInfo(): Promise<any> {
    const balance = await this.getAccountBalance();
    const openOrders = await this.getOpenOrders();
    const tradesHistory = await this.getTradesHistory();

    return {
      balance: balance.result || {},
      openOrders: openOrders.result?.open || {},
      tradesHistory: tradesHistory.result?.trades || {},
      tradesCount: tradesHistory.result?.count || 0
    };
  }

  disconnect(): void {
    this.apiKey = null;
    this.apiSecret = null;
    this.isAuthenticated = false;
  }

  getConnectionStatus(): boolean {
    return this.isAuthenticated;
  }
}

// Create singleton instance and export as default
const krakenApiService = new KrakenApiService();
export default krakenApiService;
