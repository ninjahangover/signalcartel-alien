generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                   @id @default(cuid())
  name                    String?
  email                   String                   @unique
  emailVerified           DateTime?
  image                   String?
  role                    String                   @default("user")
  subscriptionTier        String                   @default("none")
  subscriptionStatus      String                   @default("inactive")
  stripeCustomerId        String?
  stripeSubscriptionId    String?
  subscriptionEndsAt      DateTime?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  krakenApiKey            String?
  krakenSecretKey         String?
  apiKeysVerified         Boolean                  @default(false)
  accounts                Account[]
  adminLogs               AdminLog[]
  LiveTradingSession      LiveTradingSession[]
  paperAccounts           PaperAccount[]
  pineStrategies          PineStrategy[]
  sessions                Session[]
  UserLiveTradingSettings UserLiveTradingSettings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AdminLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  description String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PineStrategy {
  id              String                 @id @default(cuid())
  userId          String
  name            String
  description     String?
  pineScriptCode  String
  version         String                 @default("1.0")
  strategyType    String
  timeframe       String                 @default("1h")
  tradingPairs    String
  isActive        Boolean                @default(false)
  isOptimized     Boolean                @default(false)
  currentWinRate  Float?
  totalTrades     Int                    @default(0)
  profitLoss      Float                  @default(0.0)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  lastOptimizedAt DateTime?
  user            User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  optimizations   StrategyOptimization[]
  parameters      StrategyParameter[]
  performances    StrategyPerformance[]
}

model StrategyParameter {
  id                   String       @id @default(cuid())
  strategyId           String
  parameterName        String
  parameterType        String
  category             String
  currentValue         String
  originalValue        String
  minValue             String?
  maxValue             String?
  isOptimizable        Boolean      @default(true)
  optimizationPriority Int          @default(1)
  volatilityAdjustment Boolean      @default(false)
  volumeAdjustment     Boolean      @default(false)
  momentumAdjustment   Boolean      @default(false)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  lastChangedAt        DateTime?
  strategy             PineStrategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@unique([strategyId, parameterName])
}

model StrategyOptimization {
  id                 String       @id @default(cuid())
  strategyId         String
  optimizationType   String
  triggerReason      String
  parametersChanged  String
  previousParameters String
  marketVolatility   Float?
  marketMomentum     Float?
  volumeAverage      Float?
  marketRegime       String?
  backtestResults    String?
  confidenceScore    Float?
  wasApplied         Boolean      @default(false)
  createdAt          DateTime     @default(now())
  appliedAt          DateTime?
  strategy           PineStrategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
}

model StrategyPerformance {
  id            String       @id @default(cuid())
  strategyId    String
  timeframe     String
  totalTrades   Int
  winningTrades Int
  losingTrades  Int
  winRate       Float
  totalPnL      Float
  avgWin        Float
  avgLoss       Float
  maxDrawdown   Float
  sharpeRatio   Float?
  avgVolatility Float?
  avgVolume     Float?
  marketTrend   String?
  periodStart   DateTime
  periodEnd     DateTime
  calculatedAt  DateTime     @default(now())
  strategy      PineStrategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
}

model MarketData {
  id              String   @id @default(cuid())
  symbol          String
  timeframe       String   @default("1m")
  timestamp       DateTime
  open            Float
  high            Float
  low             Float
  close           Float
  volume          Float    @default(0.0)
  rsi             Float?
  macd            Float?
  macdSignal      Float?
  ema20           Float?
  ema50           Float?
  sma20           Float?
  sma50           Float?
  bollinger_upper Float?
  bollinger_lower Float?
  atr             Float?
  volatility      Float?
  momentum        Float?
  volumeProfile   String?
  createdAt       DateTime @default(now())

  @@unique([symbol, timeframe, timestamp])
  @@index([symbol, timeframe])
  @@index([timestamp])
}

model MarketDataCollection {
  id              String    @id @default(cuid())
  symbol          String    @unique
  status          String    @default("ACTIVE")
  enabled         Boolean   @default(true)
  interval        Int       @default(60)
  dataPoints      Int       @default(0)
  completeness    Float     @default(0.0)
  oldestData      DateTime?
  newestData      DateTime?
  lastCollected   DateTime?
  lastError       String?
  errorCount      Int       @default(0)
  errorDetails    String?
  avgResponseTime Float?
  successRate     Float     @default(100.0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([symbol])
  @@index([status])
  @@index([enabled])
}

model TradingSignal {
  id             String    @id @default(cuid())
  symbol         String
  strategy       String
  signalType     String
  currentPrice   Float
  targetPrice    Float?
  stopLoss       Float?
  confidence     Float
  timeframe      String?
  indicators     String?
  marketRegime   String?
  volume         Float?
  executed       Boolean   @default(false)
  executedAt     DateTime?
  executionPrice Float?
  outcome        String?
  pnl            Float?
  pnlPercent     Float?
  holdingPeriod  Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([symbol])
  @@index([strategy])
  @@index([executed])
  @@index([createdAt])
}

model PaperAccount {
  id                    String                @id @default(cuid())
  userId                String
  platform              String
  platformAccountId     String
  apiKey                String?
  apiSecret             String?
  initialBalance        Float                 @default(1000000.0)
  currentBalance        Float
  dayTradingBuyingPower Float?
  buyingPower           Float?
  equity                Float?
  status                String                @default("active")
  createdAt             DateTime              @default(now())
  expiresAt             DateTime?
  lastResetAt           DateTime?
  totalTrades           Int                   @default(0)
  winningTrades         Int                   @default(0)
  totalPnL              Float                 @default(0.0)
  maxDrawdown           Float                 @default(0.0)
  bestDay               Float                 @default(0.0)
  worstDay              Float                 @default(0.0)
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders                PaperOrder[]
  positions             PaperPosition[]
  tradingSessions       PaperTradingSession[]

  @@index([userId])
  @@index([status])
  @@index([platform])
}

model PaperTradingSession {
  id               String       @id @default(cuid())
  paperAccountId   String
  sessionName      String?
  strategy         String?
  sessionStart     DateTime     @default(now())
  sessionEnd       DateTime?
  isActive         Boolean      @default(true)
  startingBalance  Float
  startingEquity   Float?
  endingBalance    Float?
  endingEquity     Float?
  totalTrades      Int          @default(0)
  winningTrades    Int          @default(0)
  winRate          Float        @default(0.0)
  totalPnL         Float        @default(0.0)
  maxDrawdown      Float        @default(0.0)
  sharpeRatio      Float?
  marketRegime     String?
  avgVolatility    Float?
  primarySymbols   String?
  notes            String?
  performanceNotes String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  trades           PaperTrade[]
  paperAccount     PaperAccount @relation(fields: [paperAccountId], references: [id], onDelete: Cascade)

  @@index([paperAccountId])
  @@index([isActive])
  @@index([sessionStart])
}

model PaperPosition {
  id               String       @id @default(cuid())
  paperAccountId   String
  sessionId        String?
  symbol           String
  side             String
  quantity         Float
  avgEntryPrice    Float
  currentPrice     Float
  unrealizedPnL    Float        @default(0.0)
  realizedPnL      Float        @default(0.0)
  totalCost        Float
  marketValue      Float
  stopLoss         Float?
  takeProfit       Float?
  maxPositionValue Float?
  openedAt         DateTime     @default(now())
  closedAt         DateTime?
  isOpen           Boolean      @default(true)
  strategy         String?
  entryReason      String?
  exitReason       String?
  holdingPeriod    Int?
  maxGain          Float        @default(0.0)
  maxLoss          Float        @default(0.0)
  relatedOrders    PaperOrder[]
  paperAccount     PaperAccount @relation(fields: [paperAccountId], references: [id], onDelete: Cascade)
  relatedTrades    PaperTrade[]

  @@index([paperAccountId])
  @@index([symbol])
  @@index([isOpen])
  @@index([openedAt])
}

model PaperOrder {
  id              String         @id @default(cuid())
  paperAccountId  String
  positionId      String?
  platformOrderId String?
  clientOrderId   String?
  symbol          String
  side            String
  orderType       String
  quantity        Float
  limitPrice      Float?
  stopPrice       Float?
  filledPrice     Float?
  filledQuantity  Float          @default(0.0)
  status          String         @default("pending")
  timeInForce     String         @default("day")
  submittedAt     DateTime       @default(now())
  filledAt        DateTime?
  cancelledAt     DateTime?
  strategy        String?
  orderReason     String?
  paperAccount    PaperAccount   @relation(fields: [paperAccountId], references: [id], onDelete: Cascade)
  position        PaperPosition? @relation(fields: [positionId], references: [id])
  trades          PaperTrade[]

  @@index([paperAccountId])
  @@index([symbol])
  @@index([status])
  @@index([submittedAt])
}

model PaperTrade {
  id              String              @id @default(cuid())
  sessionId       String
  positionId      String?
  orderId         String?
  symbol          String
  side            String
  quantity        Float
  price           Float
  value           Float
  commission      Float               @default(0.0)
  fees            Float               @default(0.0)
  netValue        Float
  pnl             Float?
  pnlPercent      Float?
  isEntry         Boolean
  tradeType       String
  strategy        String?
  signalSource    String?
  confidence      Float?
  marketCondition String?
  volatility      Float?
  volume          Float?
  executedAt      DateTime            @default(now())
  order           PaperOrder?         @relation(fields: [orderId], references: [id])
  position        PaperPosition?      @relation(fields: [positionId], references: [id])
  session         PaperTradingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([symbol])
  @@index([executedAt])
  @@index([isEntry])
}

model PaperPerformanceSnapshot {
  id              String   @id @default(cuid())
  paperAccountId  String
  snapshotDate    DateTime @default(now())
  period          String
  accountBalance  Float
  equity          Float
  totalPnL        Float
  dailyPnL        Float
  tradesCount     Int
  winningTrades   Int
  winRate         Float
  avgWin          Float
  avgLoss         Float
  profitFactor    Float?
  maxDrawdown     Float
  currentDrawdown Float
  sharpeRatio     Float?
  sortinoRatio    Float?
  volatility      Float?
  openPositions   Int
  totalExposure   Float
  longExposure    Float
  shortExposure   Float
  marketCondition String?
  benchmarkReturn Float?
  correlation     Float?

  @@index([paperAccountId])
  @@index([snapshotDate])
  @@index([period])
}

model SentimentData {
  id             String   @id @default(cuid())
  symbol         String
  source         String
  score          Float
  confidence     Float
  tweetCount     Int?
  positiveCount  Int?
  negativeCount  Int?
  neutralCount   Int?
  keywords       String?
  rawData        String?
  timestamp      DateTime @default(now())
  processingTime Int?

  @@index([symbol, timestamp])
  @@index([source, timestamp])
  @@index([score, confidence])
}

model EnhancedTradingSignal {
  id                  String    @id @default(cuid())
  symbol              String
  strategy            String
  technicalScore      Float
  technicalAction     String
  sentimentScore      Float?
  sentimentConfidence Float?
  sentimentConflict   Boolean   @default(false)
  combinedConfidence  Float
  finalAction         String
  confidenceBoost     Float?
  wasExecuted         Boolean   @default(false)
  executeReason       String?
  tradeId             String?
  signalTime          DateTime  @default(now())
  executionTime       DateTime?

  @@index([symbol, signalTime])
  @@index([strategy, signalTime])
  @@index([wasExecuted])
}

model IntuitionAnalysis {
  id                  String    @id @default(cuid())
  symbol              String
  strategy            String
  signalType          String
  originalConfidence  Float
  signalPrice         Float
  flowFieldResonance  Float
  patternResonance    Float
  temporalIntuition   Float
  overallIntuition    Float
  expectancyScore     Float
  winRateProjection   Float
  riskRewardRatio     Float
  recommendation      String
  performanceGap      Float
  confidenceGap       Float
  flowFieldData       String?
  patternData         String?
  temporalData        String?
  actualOutcome       String?
  actualPnL           Float?
  intuitionAccuracy   Boolean?
  calculationAccuracy Boolean?
  outperformed        String?
  marketConditions    String?
  learningWeight      Float     @default(1.0)
  analysisTime        DateTime  @default(now())
  outcomeTime         DateTime?

  @@index([symbol, analysisTime])
  @@index([strategy, analysisTime])
  @@index([recommendation])
  @@index([actualOutcome])
}

model IntuitionPerformance {
  id                        String   @id @default(cuid())
  timeframe                 String
  periodStart               DateTime
  periodEnd                 DateTime
  totalAnalyses             Int
  intuitionRecommended      Int
  calculationRecommended    Int
  intuitionCorrect          Int
  calculationCorrect        Int
  intuitionAccuracy         Float
  calculationAccuracy       Float
  intuitionAvgPnL           Float
  calculationAvgPnL         Float
  intuitionTotalPnL         Float
  calculationTotalPnL       Float
  performanceAdvantage      Float
  avgIntuitionConfidence    Float
  avgCalculationConfidence  Float
  confidenceCorrelation     Float
  strongTrendingPerformance Float
  rangingMarketPerformance  Float
  volatileMarketPerformance Float
  improvementRate           Float
  convergenceRate           Float
  optimalBlendRatio         Float
  calculatedAt              DateTime @default(now())

  @@index([timeframe, periodStart])
  @@index([calculatedAt])
}

model ManagedPosition {
  id            String        @id @default(cuid())
  strategy      String
  symbol        String
  side          String
  entryPrice    Float
  quantity      Float
  entryTradeId  String
  entryTime     DateTime
  exitPrice     Float?
  exitTradeId   String?
  exitTime      DateTime?
  status        String        @default("open")
  realizedPnL   Float?
  unrealizedPnL Float?
  stopLoss      Float?
  takeProfit    Float?
  maxHoldTime   Int?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  entryTrade    ManagedTrade  @relation("EntryTrade", fields: [entryTradeId], references: [id])
  exitTrade     ManagedTrade? @relation("ExitTrade", fields: [exitTradeId], references: [id])

  @@index([strategy, symbol])
  @@index([status])
  @@index([entryTime])
  @@index([symbol, status])
}

model ManagedTrade {
  id             String            @id @default(cuid())
  positionId     String
  side           String
  symbol         String
  quantity       Float
  price          Float
  value          Float
  strategy       String
  executedAt     DateTime
  pnl            Float?
  isEntry        Boolean
  entryPositions ManagedPosition[] @relation("EntryTrade")
  exitPositions  ManagedPosition[] @relation("ExitTrade")

  @@index([positionId])
  @@index([strategy, symbol])
  @@index([executedAt])
  @@index([isEntry])
}

model ExitStrategy {
  id                  String   @id @default(cuid())
  strategy            String
  symbol              String?
  takeProfitPercent   Float?
  stopLossPercent     Float?
  trailingStopPercent Float?
  maxHoldMinutes      Int?
  reverseSignalExit   Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([strategy, symbol])
  @@index([strategy])
}

model LivePerformanceSnapshot {
  id                  String             @id
  sessionId           String
  snapshotTime        DateTime           @default(now())
  intervalType        String
  accountBalance      Float
  totalValue          Float
  totalExposure       Float
  availableMargin     Float
  totalPnL            Float
  dailyPnL            Float
  unrealizedPnL       Float
  realizedPnL         Float
  tradesCount         Int
  winningTrades       Int
  losingTrades        Int
  winRate             Float
  currentDrawdown     Float
  maxDrawdown         Float
  riskExposure        Float
  leverageRatio       Float?
  openPositions       Int
  longPositions       Int
  shortPositions      Int
  avgPositionSize     Float
  profitFactor        Float?
  sharpeRatio         Float?
  sortinoRatio        Float?
  calmarRatio         Float?
  marketVolatility    Float?
  correlationToMarket Float?
  marketCondition     String?
  executionLatency    Float?
  apiResponseTime     Float?
  systemUptime        Float              @default(100.0)
  LiveTradingSession  LiveTradingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([intervalType])
  @@index([sessionId])
  @@index([snapshotTime])
}

model LivePosition {
  id                 String             @id
  sessionId          String
  symbol             String
  strategy           String
  side               String
  quantity           Float
  entryPrice         Float
  entryValue         Float
  entryTime          DateTime
  entryTradeIds      String
  status             String             @default("open")
  currentPrice       Float?
  unrealizedPnL      Float              @default(0.0)
  exitPrice          Float?
  exitValue          Float?
  exitTime           DateTime?
  exitTradeIds       String?
  realizedPnL        Float?
  stopLossPrice      Float?
  takeProfitPrice    Float?
  trailingStopPrice  Float?
  maxHoldTime        Int?
  totalCommissions   Float              @default(0.0)
  totalFees          Float              @default(0.0)
  netPnL             Float?
  positionNotes      String?
  marketConditions   String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  LiveTradingSession LiveTradingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  LiveTrade          LiveTrade[]

  @@index([entryTime])
  @@index([sessionId])
  @@index([status])
  @@index([strategy])
  @@index([symbol])
}

model LiveTrade {
  id                 String             @id
  sessionId          String
  positionId         String?
  exchangeOrderId    String?
  exchangeTradeId    String?
  symbol             String
  side               String
  type               String
  quantity           Float
  price              Float
  value              Float
  commission         Float              @default(0.0)
  fees               Float              @default(0.0)
  netValue           Float
  purpose            String
  isEntry            Boolean
  strategy           String
  signalConfidence   Float?
  signalSource       String?
  preTradeRisk       String?
  portfolioImpact    Float?
  requestedAt        DateTime
  submittedAt        DateTime
  executedAt         DateTime?
  acknowledgedAt     DateTime?
  orderStatus        String             @default("pending")
  fillStatus         String             @default("unfilled")
  filledQuantity     Float              @default(0.0)
  remainingQuantity  Float
  marketPrice        Float?
  spread             Float?
  slippage           Float?
  marketCondition    String?
  pnl                Float?
  pnlPercent         Float?
  holdingPeriod      Int?
  tradeNotes         String?
  riskNotes          String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  LivePosition       LivePosition?      @relation(fields: [positionId], references: [id], map: "LiveTrade_entryPosition_fkey")
  LiveTradingSession LiveTradingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([exchangeOrderId])
  @@index([executedAt])
  @@index([isEntry])
  @@index([orderStatus])
  @@index([sessionId])
  @@index([strategy])
  @@index([symbol])
}

model LiveTradeFailure {
  id                 String             @id
  sessionId          String
  symbol             String
  side               String
  quantity           Float
  intendedPrice      Float?
  strategy           String
  failureType        String
  errorCode          String?
  errorMessage       String
  exchangeResponse   String?
  portfolioState     String?
  riskAssessment     String?
  signalSource       String?
  signalConfidence   Float?
  marketCondition    String?
  retryAttempted     Boolean            @default(false)
  retryCount         Int                @default(0)
  alternativeAction  String?
  opportunityCost    Float?
  riskAvoided        Float?
  wasPreventable     Boolean?
  lessonLearned      String?
  systemImprovement  String?
  attemptedAt        DateTime
  failedAt           DateTime           @default(now())
  resolvedAt         DateTime?
  LiveTradingSession LiveTradingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([failedAt])
  @@index([failureType])
  @@index([sessionId])
  @@index([strategy])
  @@index([symbol])
}

model LiveTradingSession {
  id                      String                    @id
  userId                  String
  sessionName             String
  strategy                String
  exchange                String                    @default("kraken")
  mode                    String                    @default("validate")
  status                  String                    @default("inactive")
  startedAt               DateTime?
  stoppedAt               DateTime?
  initialCapital          Float
  currentCapital          Float
  totalExposure           Float                     @default(0.0)
  maxDailyLoss            Float
  maxPositionSize         Float
  maxTotalExposure        Float                     @default(80.0)
  totalTrades             Int                       @default(0)
  winningTrades           Int                       @default(0)
  totalPnL                Float                     @default(0.0)
  dailyPnL                Float                     @default(0.0)
  maxDrawdown             Float                     @default(0.0)
  averageWin              Float?
  averageLoss             Float?
  profitFactor            Float?
  sharpeRatio             Float?
  emergencyStopTriggered  Boolean                   @default(false)
  emergencyStopReason     String?
  emergencyStopTime       DateTime?
  sessionNotes            String?
  riskParameters          String?
  tradingHours            String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  LivePerformanceSnapshot LivePerformanceSnapshot[]
  LivePosition            LivePosition[]
  LiveTrade               LiveTrade[]
  LiveTradeFailure        LiveTradeFailure[]
  User                    User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([exchange])
  @@index([startedAt])
  @@index([status])
  @@index([userId])
}

model LiveTradingSystemHealth {
  id               String    @id
  hostname         String
  processId        Int
  version          String
  status           String
  uptime           Int
  lastHeartbeat    DateTime  @default(now())
  cpuUsage         Float
  memoryUsage      Float
  diskUsage        Float?
  networkLatency   Float?
  activeSessions   Int       @default(0)
  pendingOrders    Int       @default(0)
  apiCallsPerMin   Int       @default(0)
  errorRate        Float     @default(0.0)
  krakenStatus     String    @default("unknown")
  krakenLatency    Float?
  dataFeedStatus   String    @default("unknown")
  lastMarketData   DateTime?
  totalExposure    Float     @default(0.0)
  riskLimit        Float
  emergencyStops   Int       @default(0)
  activeAlerts     String?
  warningMessages  String?
  criticalIssues   String?
  lastRecoveryTime DateTime?
  recoveryCount    Int       @default(0)
  backupStatus     String    @default("unknown")
  reportTime       DateTime  @default(now())

  @@index([hostname])
  @@index([lastHeartbeat])
  @@index([reportTime])
  @@index([status])
}

model UserLiveTradingSettings {
  id                   String    @id
  userId               String    @unique
  liveTradingEnabled   Boolean   @default(false)
  maxDailyRisk         Float     @default(100.0)
  maxPositionSize      Float     @default(5.0)
  maxSimultaneousPos   Int       @default(3)
  preferredExchange    String    @default("kraken")
  exchangeApiKey       String?
  exchangeApiSecret    String?
  exchangePassphrase   String?
  testMode             Boolean   @default(true)
  riskTolerance        String    @default("conservative")
  emergencyStopEnabled Boolean   @default(true)
  emergencyStopLoss    Float     @default(10.0)
  tradingHours         String?
  weekendTrading       Boolean   @default(false)
  holidayTrading       Boolean   @default(false)
  enableEmailAlerts    Boolean   @default(true)
  enableSmsAlerts      Boolean   @default(false)
  emergencyContacts    String?
  liveTradingStartDate DateTime?
  totalLiveCapital     Float     @default(0.0)
  lifetimePnL          Float     @default(0.0)
  bestSession          Float     @default(0.0)
  worstSession         Float     @default(0.0)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime
  lastLiveTradeAt      DateTime?
  User                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([liveTradingEnabled])
  @@index([userId])
}

// QUANTUM FORGE™ Pair Opportunity Scanner Tables
model PairOpportunity {
  id                String   @id @default(cuid())
  symbol            String
  baseAsset         String
  quoteAsset        String
  
  // Core Scoring
  opportunityScore  Float
  confidence        Float
  risk              Float
  
  // Analysis Results (JSON fields for flexibility)
  orderBookAnalysis String   // JSON: liquidityScore, whaleActivity, executionQuality, optimalSize
  markovAnalysis    String   // JSON: trendStrength, reversalProbability, momentumScore, stateTransitions
  sentimentAnalysis String   // JSON: overallSentiment, socialMomentum, fearGreedImpact, newsImpact
  bayesianInference String   // JSON: priorBelief, evidenceStrength, posteriorProbability, uncertainty
  llmAssessment     String   // JSON: reasoning, marketContext, opportunityType, timeHorizon
  
  // Recommendation
  recommendedAction String   // STRONG_BUY, BUY, HOLD, SELL, STRONG_SELL, AVOID
  positionSize      Float    // % of portfolio
  urgency           String   // IMMEDIATE, HIGH, MEDIUM, LOW
  stopLoss          Float
  takeProfit        Float
  
  // Metadata
  dataQuality       Float
  analysisVersion   String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([symbol])
  @@index([opportunityScore])
  @@index([recommendedAction])
  @@index([urgency])
  @@index([createdAt])
}

model OpportunityConfig {
  id                  String   @id @default(cuid())
  configName          String   @unique
  maxPairs            Int      @default(50)
  minLiquidity        Float    @default(1000000.0)
  excludeStablecoins  Boolean  @default(true)
  focusAssets         String?  // JSON array of assets to prioritize
  riskTolerance       String   @default("MODERATE") // CONSERVATIVE, MODERATE, AGGRESSIVE
  scanFrequency       Int      @default(15)         // Minutes between scans
  enabled             Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@index([enabled])
}

model OpportunityAlert {
  id              String   @id @default(cuid())
  symbol          String
  alertType       String   // NEW_OPPORTUNITY, SCORE_CHANGE, URGENT_ACTION
  message         String
  opportunityScore Float
  previousScore   Float?
  confidence      Float
  urgency         String
  processed       Boolean  @default(false)
  processedAt     DateTime?
  createdAt       DateTime @default(now())
  
  @@index([symbol])
  @@index([alertType])
  @@index([processed])
  @@index([createdAt])
}

// Dynamic Strategy Management for Multi-Pair Trading
model DynamicStrategy {
  id                String   @id @default(cuid())
  strategyName      String
  symbol            String
  isActive          Boolean  @default(true)
  
  // Strategy Configuration (JSON for flexibility)
  config            String   // JSON: all strategy parameters
  
  // Performance Tracking
  totalTrades       Int      @default(0)
  winningTrades     Int      @default(0)
  winRate           Float    @default(0.0)
  totalPnL          Float    @default(0.0)
  averagePnL        Float    @default(0.0)
  maxDrawdown       Float    @default(0.0)
  
  // Dynamic Adjustment
  lastOptimized     DateTime?
  optimizationScore Float    @default(0.5)
  adaptationCount   Int      @default(0)
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastExecuted      DateTime?
  
  @@unique([strategyName, symbol])
  @@index([isActive])
  @@index([symbol])
  @@index([winRate])
  @@index([totalPnL])
}

model PairStrategyPerformance {
  id              String   @id @default(cuid())
  strategyName    String
  symbol          String
  timeframe       String   // 1H, 4H, 1D, 1W
  
  // Performance Metrics
  trades          Int
  winRate         Float
  totalPnL        Float
  averagePnL      Float
  maxWin          Float
  maxLoss         Float
  profitFactor    Float
  sharpeRatio     Float?
  maxDrawdown     Float
  
  // Period
  periodStart     DateTime
  periodEnd       DateTime
  createdAt       DateTime @default(now())
  
  @@index([strategyName, symbol])
  @@index([timeframe])
  @@index([winRate])
  @@index([totalPnL])
}

model PairStrategyOptimization {
  id                String   @id @default(cuid())
  strategyName      String
  symbol            String
  
  // Optimization Parameters (JSON)
  originalParams    String   // JSON: original strategy parameters
  optimizedParams   String   // JSON: new optimized parameters
  
  // Optimization Results
  backtestPeriod    Int      // Days of backtest
  originalScore     Float
  optimizedScore    Float
  improvement       Float
  
  // Implementation
  isApplied         Boolean  @default(false)
  appliedAt         DateTime?
  
  createdAt         DateTime @default(now())
  
  @@index([strategyName, symbol])
  @@index([isApplied])
  @@index([improvement])
}
